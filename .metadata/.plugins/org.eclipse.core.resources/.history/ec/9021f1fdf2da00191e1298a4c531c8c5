package com.everis.equipouno.controller;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.everis.equipouno.Application;
import com.everis.equipouno.model.Curso;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

//Junit para springboot
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = Application.class)
@WebAppConfiguration
public class CursoControllerTest {

	//propiedad para simular peticiones y respuestas http, es un objeto de prueba o dummy
	//spring no lo tiene en el conexto, aqui no se pone autowired
	private MockMvc mvc;
	
	@Autowired
	private WebApplicationContext webApplicationContext;
	
	//metodo para inicializar MockMvc
	@Before//se ejecuta antes de la prueba
	public void setUp(){
		mvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
	}
	
	@Test
	public void testListar() throws Exception {
		String url = "/curso/";
		//Jackson para armar JSON
		MvcResult resultado = mvc.perform(MockMvcRequestBuilders.get(url)).andReturn();
		int status = resultado.getResponse().getStatus();
		assertTrue(status == 200);
		String jsonRespuesta = resultado.getResponse().getContentAsString();
		ObjectMapper mapper = new ObjectMapper();
		List<Curso> cursos = mapper.readValue(jsonRespuesta, new TypeReference<List<Curso>>() {});
		assertNotNull(cursos);
		assertTrue(cursos.size() > 0);
		for (Curso curso : cursos) {
			assertTrue(curso.getId()>0);
		}
//		System.out.println(jsonRespuesta);
	}

	@Test
	public void testInsertar() throws Exception {
		String url = "/curso/";
		Curso curso = new Curso();
		curso.setNombrecurso("OKMM");
		curso.setDescripcion("funciona");
		//Jackson para armar JSON
		ObjectMapper mapper = new ObjectMapper();
		String json = mapper.writeValueAsString(curso);
		MvcResult resultado = mvc.perform(MockMvcRequestBuilders.post(url).
				contentType(MediaType.APPLICATION_JSON_VALUE).content(json)).andReturn();
		int status = resultado.getResponse().getStatus();
		assertTrue(status == 200);
		String jsonRespuesta = resultado.getResponse().getContentAsString();
		Curso recibido = mapper.readValue(jsonRespuesta, Curso.class);
		assertTrue(recibido.getId() > 0);
	}
	
	@Test
	public void testActualizar() throws Exception{
		String url = "/curso/";
		Curso curso = new Curso();
		curso.setId(12);
		curso.setNombrecurso("Testimonio");
		curso.setDescripcion("si sirve");
		//Jackson para armar JSON
		ObjectMapper mapper = new ObjectMapper();
		String json = mapper.writeValueAsString(curso);
		MvcResult resultado = mvc.perform(MockMvcRequestBuilders.put(url).
				contentType(MediaType.APPLICATION_JSON_VALUE).content(json)).andReturn();
		int status = resultado.getResponse().getStatus();
		assertTrue(status == 200);
		String jsonRespuesta = resultado.getResponse().getContentAsString();
		Curso recibido = mapper.readValue(jsonRespuesta, Curso.class);
		assertTrue(recibido.getId() == curso.getId());
	}
	
	@Test
	public void testBorrar() throws Exception{
		int idcurso = 11;
		String url = "/curso/"+idcurso;
		//Jackson para armar JSON
		MvcResult resultado = mvc.perform(MockMvcRequestBuilders.delete(url)).andReturn();
		int status = resultado.getResponse().getStatus();
		assertTrue(status == 200);
		String jsonRespuesta = resultado.getResponse().getContentAsString();
		System.out.println(jsonRespuesta);
//		assertTrue(recibido.getId() == curso.getId());
	}

}
